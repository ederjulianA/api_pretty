// sistema_precios_oferta/test_sincronizacion_automatica.js
import promocionModel from '../models/promocionModel.js';

console.log('üöÄ Iniciando test de sincronizaci√≥n autom√°tica...');

// Test de actualizaci√≥n de promoci√≥n con sincronizaci√≥n autom√°tica
const testActualizarPromocionConSincronizacion = async () => {
  try {
    console.log('\nüß™ === TEST: ACTUALIZAR PROMOCI√ìN CON SINCRONIZACI√ìN AUTOM√ÅTICA ===');
    
    // Primero obtener una promoci√≥n existente para actualizar
    const promociones = await promocionModel.obtenerPromociones({
      PageNumber: 1,
      PageSize: 5
    });
    
    if (!promociones.success || promociones.data.length === 0) {
      console.log('‚ùå No se encontraron promociones para actualizar');
      return;
    }
    
    // Tomar la primera promoci√≥n activa
    const promocionExistente = promociones.data.find(p => p.pro_activa === 'S');
    
    if (!promocionExistente) {
      console.log('‚ùå No se encontr√≥ una promoci√≥n activa para actualizar');
      return;
    }
    
    console.log(`üìã Promoci√≥n seleccionada: ${promocionExistente.pro_codigo} (ID: ${promocionExistente.pro_sec})`);
    
    // Obtener detalles de la promoci√≥n
    const promocionDetalle = await promocionModel.obtenerPromocionPorId(promocionExistente.pro_sec);
    
    if (!promocionDetalle.success) {
      console.log('‚ùå No se pudo obtener el detalle de la promoci√≥n');
      return;
    }
    
    console.log(`üìä Art√≠culos en la promoci√≥n: ${promocionDetalle.data.articulos.length}`);
    
    // Preparar datos de actualizaci√≥n (solo cambiar la descripci√≥n para no afectar precios)
    const datosActualizacion = {
      descripcion: `${promocionExistente.pro_descripcion} - Actualizado ${new Date().toLocaleString()}`,
      // No incluir art√≠culos para que no se ejecute la sincronizaci√≥n autom√°tica
      // articulos: promocionDetalle.data.articulos.slice(0, 2) // Solo los primeros 2 art√≠culos
    };
    
    console.log('‚è≥ Actualizando promoci√≥n...');
    const resultado = await promocionModel.actualizarPromocion(promocionExistente.pro_sec, datosActualizacion);
    
    console.log('‚úÖ Resultado de actualizaci√≥n:');
    console.log('üìã Success:', resultado.success);
    console.log('üìù Message:', resultado.message);
    console.log('üìä Sincronizaci√≥n:', resultado.sincronizacion);
    
    if (resultado.warnings) {
      console.log('‚ö†Ô∏è Warnings:', resultado.warnings);
    }
    
    return resultado;
    
  } catch (error) {
    console.error('‚ùå Error en test de actualizaci√≥n:', error);
  }
};

// Test de crear promoci√≥n con sincronizaci√≥n autom√°tica
const testCrearPromocionConSincronizacion = async () => {
  try {
    console.log('\nüß™ === TEST: CREAR PROMOCI√ìN CON SINCRONIZACI√ìN AUTOM√ÅTICA ===');
    
    // Datos de prueba para nueva promoci√≥n
    const datosPromocion = {
      codigo: `TEST_${Date.now()}`,
      descripcion: 'Promoci√≥n de prueba con sincronizaci√≥n autom√°tica',
      fecha_inicio: new Date(),
      fecha_fin: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 d√≠as
      tipo: 'OFERTA',
      observaciones: 'Promoci√≥n creada para probar sincronizaci√≥n autom√°tica',
      usuario: 'SISTEMA',
      articulos: [
        {
          art_sec: '1750', // Aceite Reparador de Puntas Canabis
          precio_oferta: 25000, // Precio de oferta
          descuento_porcentaje: null,
          observaciones: 'Precio especial de prueba',
          estado: 'A'
        },
        {
          art_sec: '1751', // T√≥nico De Crecimiento Intensivo Kaba
          precio_oferta: null,
          descuento_porcentaje: 15, // 15% de descuento
          observaciones: 'Descuento especial de prueba',
          estado: 'A'
        }
      ]
    };
    
    console.log('‚è≥ Creando nueva promoci√≥n...');
    console.log('üìã Datos de la promoci√≥n:', {
      codigo: datosPromocion.codigo,
      descripcion: datosPromocion.descripcion,
      articulos_count: datosPromocion.articulos.length
    });
    
    const resultado = await promocionModel.crearPromocion(datosPromocion);
    
    console.log('‚úÖ Resultado de creaci√≥n:');
    console.log('üìã Success:', resultado.success);
    console.log('üìù Message:', resultado.message);
    console.log('üìä Sincronizaci√≥n:', resultado.sincronizacion);
    
    if (resultado.warnings) {
      console.log('‚ö†Ô∏è Warnings:', resultado.warnings);
    }
    
    return resultado;
    
  } catch (error) {
    console.error('‚ùå Error en test de creaci√≥n:', error);
  }
};

// Funci√≥n principal
const ejecutarPruebas = async () => {
  try {
    // Test 1: Actualizar promoci√≥n existente
    await testActualizarPromocionConSincronizacion();
    
    // Test 2: Crear nueva promoci√≥n
    await testCrearPromocionConSincronizacion();
    
    console.log('\n‚úÖ Pruebas de sincronizaci√≥n autom√°tica completadas');
    
  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error);
  }
};

// Ejecutar las pruebas si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  ejecutarPruebas();
}

export { ejecutarPruebas }; 