// sistema_precios_oferta/test_articulos_inactivos.js
import promocionModel from '../models/promocionModel.js';
import { updateWooProductPrices } from '../jobs/updateWooProductPrices.js';

console.log('üöÄ Iniciando test de art√≠culos inactivos en promociones...');

const testArticulosInactivos = async () => {
  try {
    console.log('\nüß™ === TEST: SINCRONIZACI√ìN CON ART√çCULOS INACTIVOS ===');
    
    // Primero obtener una promoci√≥n existente
    const promociones = await promocionModel.obtenerPromociones({
      PageNumber: 1,
      PageSize: 5
    });
    
    if (!promociones.success || promociones.data.length === 0) {
      console.log('‚ùå No se encontraron promociones para probar');
      return;
    }
    
    // Tomar la primera promoci√≥n activa
    const promocionExistente = promociones.data.find(p => p.pro_activa === 'S');
    
    if (!promocionExistente) {
      console.log('‚ùå No se encontr√≥ una promoci√≥n activa para probar');
      return;
    }
    
    console.log(`üìã Promoci√≥n seleccionada: ${promocionExistente.pro_codigo} (ID: ${promocionExistente.pro_sec})`);
    
    // Obtener detalles de la promoci√≥n
    const promocionDetalle = await promocionModel.obtenerPromocionPorId(promocionExistente.pro_sec);
    
    if (!promocionDetalle.success) {
      console.log('‚ùå No se pudo obtener el detalle de la promoci√≥n');
      return;
    }
    
    console.log(`üìä Art√≠culos en la promoci√≥n: ${promocionDetalle.data.articulos.length}`);
    
    // Mostrar estado actual de los art√≠culos
    console.log('\nüìã Estado actual de art√≠culos:');
    promocionDetalle.data.articulos.forEach(art => {
      console.log(`  - ${art.art_cod} (${art.art_nom}): ${art.pro_det_estado === 'A' ? 'ACTIVO' : 'INACTIVO'}`);
    });
    
    // Test 1: Sincronizaci√≥n directa con art√≠culos mixtos (activos e inactivos)
    console.log('\nüîÑ === TEST 1: SINCRONIZACI√ìN DIRECTA CON ART√çCULOS MIXTOS ===');
    
    // Simular estados de art√≠culos (algunos activos, otros inactivos)
    const art_cods = promocionDetalle.data.articulos.slice(0, 3).map(art => art.art_cod);
    const estadosArticulos = {};
    
    // Hacer que el primer art√≠culo est√© inactivo, los otros activos
    art_cods.forEach((art_cod, index) => {
      estadosArticulos[art_cod] = index === 0 ? 'I' : 'A'; // Primer art√≠culo inactivo
    });
    
    console.log('üìä Estados simulados:');
    Object.entries(estadosArticulos).forEach(([art_cod, estado]) => {
      console.log(`  - ${art_cod}: ${estado === 'A' ? 'ACTIVO' : 'INACTIVO'}`);
    });
    
    console.log('‚è≥ Ejecutando sincronizaci√≥n directa...');
    const resultadoDirecto = await updateWooProductPrices(art_cods, {
      estadosArticulos: estadosArticulos
    });
    
    console.log('‚úÖ Resultado de sincronizaci√≥n directa:');
    console.log('üìã Success Count:', resultadoDirecto.summary.successCount);
    console.log('‚ùå Error Count:', resultadoDirecto.summary.errorCount);
    console.log('‚è≠Ô∏è Skipped Count:', resultadoDirecto.summary.skippedCount);
    console.log('‚è±Ô∏è Duraci√≥n:', resultadoDirecto.summary.duration);
    
    // Test 2: Sincronizaci√≥n a trav√©s de la promoci√≥n
    console.log('\nüîÑ === TEST 2: SINCRONIZACI√ìN A TRAV√âS DE PROMOCI√ìN ===');
    
    console.log('‚è≥ Ejecutando sincronizaci√≥n de promoci√≥n...');
    const resultadoPromocion = await promocionModel.sincronizarPreciosPromocion(promocionExistente.pro_sec, {
      solo_activos: false // Sincronizar todos los art√≠culos
    });
    
    console.log('‚úÖ Resultado de sincronizaci√≥n de promoci√≥n:');
    console.log('üìã Success:', resultadoPromocion.success);
    console.log('üìù Message:', resultadoPromocion.message);
    
    if (resultadoPromocion.data) {
      console.log('üìä Datos de sincronizaci√≥n:');
      console.log('  - Art√≠culos procesados:', resultadoPromocion.data.articulos_procesados);
      console.log('  - Art√≠culos exitosos:', resultadoPromocion.data.articulos_exitosos);
      console.log('  - Art√≠culos con error:', resultadoPromocion.data.articulos_con_error);
      console.log('  - Duraci√≥n:', resultadoPromocion.data.duracion);
      console.log('  - Log ID:', resultadoPromocion.data.log_id);
    }
    
    // Test 3: Verificar que los art√≠culos inactivos no tengan oferta
    console.log('\nüîç === TEST 3: VERIFICACI√ìN DE ART√çCULOS INACTIVOS ===');
    
    console.log('üìã Verificando que los art√≠culos inactivos no tengan oferta en WooCommerce...');
    console.log('üí° Los art√≠culos inactivos deber√≠an tener:');
    console.log('  - sale_price = "" (sin precio de oferta)');
    console.log('  - date_on_sale_from = null');
    console.log('  - date_on_sale_to = null');
    console.log('  - Meta data de promoci√≥n limpia');
    
    return {
      resultadoDirecto,
      resultadoPromocion
    };
    
  } catch (error) {
    console.error('‚ùå Error en test de art√≠culos inactivos:', error);
    throw error;
  }
};

// Ejecutar el test
testArticulosInactivos()
  .then(() => {
    console.log('\n‚úÖ Test de art√≠culos inactivos completado exitosamente');
  })
  .catch((error) => {
    console.error('\n‚ùå Test de art√≠culos inactivos fall√≥:', error.message);
  }); 